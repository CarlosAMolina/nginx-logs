#!/bin/bash

remove_results_file() {
    logs_pathname=$1
    csv_pathname="$logs_pathname/result.csv"
    error_pathname="$logs_pathname/error.txt"
    echo "[DEBUG] Init remove results: '$csv_pathname', '$error_pathname'"
    rm $csv_pathname
    rm $error_pathname
}

measure() {
    loop_index=$1
    language=$2
    command=$3
    if [ ! -z $4 ] ; then
	command="$command $4"
    fi
    time_unit=ms
    logs_pathname=/tmp/logs
    measure_results_pathname=results
    remove_results_file $logs_pathname
    echo "[DEBUG] Init language '$language' and command '$command'"
    echo "[DEBUG] Init heap only"
    echo "[DEBUG] Init date: $(date)"
    valgrind --tool=massif --time-unit=$time_unit --massif-out-file=$measure_results_pathname/massif.out.measure-$loop_index.$language.heap-only $command $logs_pathname
    echo "[DEBUG] End date: $(date)"
    remove_results_file $logs_pathname
    echo "[DEBUG] Init add stacks"
    echo "[DEBUG] Init date: $(date)"
    valgrind --tool=massif --time-unit=$time_unit --stacks=yes --massif-out-file=$measure_results_pathname/massif.out.measure-$loop_index.$language.add-stacks $command $logs_pathname
    echo "[DEBUG] End date: $(date)"
    remove_results_file $logs_pathname
    echo "[DEBUG] Init add pages as heap"
    echo "[DEBUG] Init date: $(date)"
    valgrind --tool=massif --time-unit=$time_unit --pages-as-heap=yes --massif-out-file=$measure_results_pathname/massif.out.measure-$loop_index.$language.add-pages-as-heap $command $logs_pathname
    echo "[DEBUG] End date: $(date)"
}

# main
for loop_index in {1..3}
do
  echo "[DEBUG] Init measure $loop_index"
  # Rust
  measure $loop_index rust ../../rust/target/release/nginx_logs
  # Python
  measure $loop_index python python ../../python/src/main.py
done

